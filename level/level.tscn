[gd_scene load_steps=42 format=3 uid="uid://b02ld6vivyc5w"]

[ext_resource type="PackedScene" uid="uid://5ylubghgfke4" path="res://entities/player.tscn" id="1_7lnir"]
[ext_resource type="Script" uid="uid://cpkv3l4p88mu7" path="res://level/module_handler.gd" id="2_5gx2l"]
[ext_resource type="PackedScene" uid="uid://caa612nngg7y4" path="res://ui/score_ui.tscn" id="3_0x9y8"]
[ext_resource type="Script" uid="uid://tsm227vr6f0o" path="res://level/level.gd" id="4_2x0y9"]
[ext_resource type="PackedScene" uid="uid://dmj5ng1b4awrq" path="res://level/module_1.tscn" id="4_kdsbj"]
[ext_resource type="PackedScene" uid="uid://6cgm08dnlml" path="res://ui/PauseMenu.tscn" id="5_ivpvi"]
[ext_resource type="PackedScene" uid="uid://b2d0kl0fx30o1" path="res://level/module_2.tscn" id="5_ml0fe"]
[ext_resource type="PackedScene" uid="uid://ctdhwbyphuct5" path="res://ui/GameOver.tscn" id="6_0v1st"]
[ext_resource type="AudioStream" uid="uid://dwurvomnktoeg" path="res://sound/AMBTown_Town Square 02_Jake Fielding_Sounds of Spain.wav" id="6_44x8d"]
[ext_resource type="PackedScene" uid="uid://ckrm365v6hkft" path="res://level/module_3.tscn" id="6_h74y2"]
[ext_resource type="PackedScene" uid="uid://0eugt6t81e8f" path="res://level/module_4.tscn" id="7_7cdnq"]
[ext_resource type="PackedScene" uid="uid://cjbe358oa6gcy" path="res://level/module_5.tscn" id="8_lsj08"]
[ext_resource type="PackedScene" uid="uid://dnk7x4c43c2l7" path="res://level/module_6.tscn" id="9_u5n7q"]
[ext_resource type="PackedScene" uid="uid://dox0vvvay4ei4" path="res://level/module_7.tscn" id="10_qslh7"]
[ext_resource type="PackedScene" uid="uid://ij1j77jjh4oy" path="res://level/module_8.tscn" id="11_kdj2k"]
[ext_resource type="PackedScene" uid="uid://c5gtu7p42v4ps" path="res://level/module_9.tscn" id="12_s1aav"]
[ext_resource type="PackedScene" uid="uid://cybeg7bu3onhj" path="res://level/module_10.tscn" id="13_xdahv"]
[ext_resource type="PackedScene" uid="uid://di3osoek2hkg6" path="res://level/module_11.tscn" id="14_krw8e"]
[ext_resource type="PackedScene" uid="uid://bc6qk45xxr438" path="res://level/module_12.tscn" id="15_ifo17"]
[ext_resource type="PackedScene" uid="uid://buh0kq0m7slux" path="res://level/module_13.tscn" id="16_q4dhf"]
[ext_resource type="PackedScene" uid="uid://dw512ws5ff3nk" path="res://level/module_14.tscn" id="17_u1dsc"]
[ext_resource type="PackedScene" uid="uid://bhx06g8dapsxt" path="res://level/module_15.tscn" id="18_8yb03"]
[ext_resource type="PackedScene" uid="uid://c5m0luwwp8t5s" path="res://level/module_16.tscn" id="19_1vdk1"]
[ext_resource type="PackedScene" uid="uid://ci1erp0qn0g44" path="res://level/module_17.tscn" id="20_3dv6e"]
[ext_resource type="AudioStream" uid="uid://buv6k2c7a4rb0" path="res://sound/BEAT ACEQUIA 20db ACT..mp3" id="24_kdsbj"]
[ext_resource type="PackedScene" uid="uid://chg3wqd24b0eh" path="res://ui/balance_minigame.tscn" id="24_ml0fe"]
[ext_resource type="Texture2D" uid="uid://r1vh08avq4dg" path="res://art/ui/tile_0167-export.png" id="25_7cdnq"]
[ext_resource type="Texture2D" uid="uid://d6axq5qgdi6k" path="res://art/ui/tile_0166-export.png" id="25_lsj08"]
[ext_resource type="Texture2D" uid="uid://cpon5ycxt6f5v" path="res://art/ui/tile_0169-export.png" id="26_lsj08"]

[sub_resource type="ProceduralSkyMaterial" id="ProceduralSkyMaterial_5gx2l"]
sky_top_color = Color(0.84, 0.46186, 0.2268, 1)
sky_horizon_color = Color(0.84, 0.67424, 0.5712, 1)
ground_horizon_color = Color(0.662243, 0.671743, 0.686743, 1)

[sub_resource type="Sky" id="Sky_qohg2"]
sky_material = SubResource("ProceduralSkyMaterial_5gx2l")

[sub_resource type="Environment" id="Environment_vkbyq"]
background_mode = 2
sky = SubResource("Sky_qohg2")
tonemap_mode = 2

[sub_resource type="Animation" id="Animation_7cdnq"]
resource_name = "blink"
length = 9.5
step = 0.5
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.5, 0.997643, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false, true, false]
}

[sub_resource type="Animation" id="Animation_lsj08"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:visible")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_u5n7q"]
_data = {
&"RESET": SubResource("Animation_lsj08"),
&"blink": SubResource("Animation_7cdnq")
}

[sub_resource type="BoxMesh" id="BoxMesh_5gx2l"]
size = Vector3(1000, 0.01, 1000)

[sub_resource type="Shader" id="Shader_5gx2l"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_a, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = MODEL_NORMAL_MATRIX * NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = inverse(MODEL_NORMAL_MATRIX) * normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = inverse(MODEL_NORMAL_MATRIX) * normalize(BINORMAL);

	// UV1 Triplanar: Enabled (with World Triplanar)
	uv1_power_normal = pow(abs(normal), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz * uv1_scale + uv1_offset;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);

	// Albedo Texture Force sRGB: Enabled
	albedo_tex.rgb = mix(
			pow((albedo_tex.rgb + vec3(0.055)) * (1.0 / (1.0 + 0.055)), vec3(2.4)),
			albedo_tex.rgb.rgb * (1.0 / 12.92),
			lessThan(albedo_tex.rgb, vec3(0.04045)));
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(0.0, 0.0, 0.0, 1.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_qohg2"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_vkbyq"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_qohg2")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_ktfr2"]
seamless = true
as_normal_map = true
noise = SubResource("FastNoiseLite_qohg2")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_qohg2"]
render_priority = -1
shader = SubResource("Shader_5gx2l")
shader_parameter/albedo = Color(0.0470588, 0.317647, 0.545098, 0.584314)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/texture_refraction = SubResource("NoiseTexture2D_ktfr2")
shader_parameter/refraction = -0.425
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_vkbyq")
shader_parameter/normal_scale = 1.0
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(100, 100, 100)
shader_parameter/uv1_offset = Vector3(0.04, 0.04, 0.04)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[node name="Level" type="Node3D"]
script = ExtResource("4_2x0y9")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
shadow_enabled = true

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_vkbyq")

[node name="Player" parent="." instance=ExtResource("1_7lnir")]

[node name="Camera3D" type="Camera3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.38588, 6.373)

[node name="ModuleHandler" type="Node3D" parent="."]
script = ExtResource("2_5gx2l")
modules = Array[PackedScene]([ExtResource("4_kdsbj"), ExtResource("5_ml0fe"), ExtResource("6_h74y2"), ExtResource("7_7cdnq"), ExtResource("8_lsj08"), ExtResource("9_u5n7q"), ExtResource("10_qslh7"), ExtResource("11_kdj2k"), ExtResource("12_s1aav"), ExtResource("13_xdahv"), ExtResource("14_krw8e"), ExtResource("15_ifo17"), ExtResource("16_q4dhf"), ExtResource("17_u1dsc"), ExtResource("18_8yb03"), ExtResource("19_1vdk1"), ExtResource("20_3dv6e")])

[node name="Timer" type="Timer" parent="."]
autostart = true

[node name="UI" type="CanvasLayer" parent="."]

[node name="ScoreUI" parent="UI" instance=ExtResource("3_0x9y8")]

[node name="Control" parent="UI" instance=ExtResource("5_ivpvi")]
visible = false

[node name="GameoverUI" parent="UI" instance=ExtResource("6_0v1st")]
visible = false

[node name="BalanceMinigame" parent="UI" instance=ExtResource("24_ml0fe")]
visible = false

[node name="Tutorial" type="Control" parent="UI"]
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="UpArrow" type="TextureRect" parent="UI/Tutorial"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -76.0
offset_top = -278.0
offset_right = 84.0
offset_bottom = -118.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("25_lsj08")

[node name="RightArrow" type="TextureRect" parent="UI/Tutorial"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = 220.0
offset_top = -80.0
offset_right = 380.0
offset_bottom = 80.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("25_7cdnq")

[node name="LeftArrow" type="TextureRect" parent="UI/Tutorial"]
layout_mode = 1
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -380.0
offset_top = -80.0
offset_right = -220.0
offset_bottom = 80.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("26_lsj08")

[node name="AnimationPlayer" type="AnimationPlayer" parent="UI/Tutorial"]
libraries = {
&"": SubResource("AnimationLibrary_u5n7q")
}
autoplay = "blink"

[node name="DirectionalLight3D2" type="DirectionalLight3D" parent="."]
transform = Transform3D(-0.866025, -0.433013, 0.25, 0, 0.5, 0.866025, -0.5, 0.75, -0.433013, 0, 0, 0)
shadow_enabled = true

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)
mesh = SubResource("BoxMesh_5gx2l")
surface_material_override/0 = SubResource("ShaderMaterial_qohg2")

[node name="MusicPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("24_kdsbj")
volume_db = -5.0
autoplay = true
bus = &"Music"

[node name="BGAudioPlayer" type="AudioStreamPlayer" parent="."]
stream = ExtResource("6_44x8d")
volume_db = -5.0
bus = &"SFX"

[connection signal="player_touched_obstacle" from="Player" to="." method="_on_player_player_touched_obstacle"]
[connection signal="player_touched_obstacle" from="Player" to="UI/BalanceMinigame" method="_on_player_player_touched_obstacle"]
[connection signal="started_sliding" from="Player" to="." method="_on_player_started_sliding"]
[connection signal="started_sliding" from="Player" to="UI/ScoreUI" method="_on_player_started_sliding"]
[connection signal="started_sliding" from="Player" to="UI/BalanceMinigame" method="_on_player_started_sliding"]
[connection signal="stopped_sliding" from="Player" to="." method="_on_player_stopped_sliding"]
[connection signal="stopped_sliding" from="Player" to="UI/ScoreUI" method="_on_player_stopped_sliding"]
[connection signal="stopped_sliding" from="Player" to="UI/BalanceMinigame" method="_on_player_stopped_sliding"]
[connection signal="timeout" from="Timer" to="ModuleHandler" method="_on_timer_timeout"]
[connection signal="random_zone_out" from="UI/BalanceMinigame" to="Player" method="_on_balance_minigame_random_zone_out"]
